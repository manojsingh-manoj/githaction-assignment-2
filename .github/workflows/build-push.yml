name: Build and Push to Azure Container Registry

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # Login to Azure using OIDC
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_AD_TENANT_ID }}"}'

      # Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app
          tags: |
            type=raw,value=v${{ github.run_number }}
            
      # Build and push Docker image with caching
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Deploy docker image to running
      - name: Deploy to VM
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker login ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} 
            docker pull ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app:v${{ github.run_number }}
            docker stop simple-node-app || true
            docker rm simple-node-app || true
            docker run -d --name simple-node-app -p 3000:3000 -e VERSION=${{github.run_number}} -e APPINSIGHTS_INSTRUMENTATIONKEY=${{secrets.APPINSIGHTS_INSTRUMENTATIONKEY}} ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app:v${{ github.run_number }}
            docker logout ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io
      
      # Wait of 2 min
      - name: Wait for 2 minutes
        run: |
          echo "Waiting for 2 minutes before proceeding..."
          sleep 120
          echo "Resuming execution."

      # Query Application Insights for ErrorEvent counts
      - name: Query Application Insights for ErrorEvent counts
        id: query_errors
        env:
          APP_INSIGHTS_APP_ID: ${{ secrets.APPLICATION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          APPLICATION_VERSION : ${{github.run_number}} 
        run: |
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

          RESULT=$(az monitor app-insights query \
            --app "$APP_INSIGHTS_APP_ID" \
            --analytics-query "
              customEvents
              | where name == 'ErrorEvent'
              | where timestamp > ago(1d)
              | summarize errorCount = count() by version = tostring(customDimensions.version)
              | order by version desc
              | take 2" \
            --output json)
          echo "results"
          echo "$RESULT"
          
          ROWS_LENGTH=$(echo "$RESULT" | jq '.tables[0].rows | length')

          if [ "$ROWS_LENGTH" -gt 0 ]; then
            COUNT_CURRENT=$(echo "$RESULT" | jq -r '.tables[0].rows[0][1]')
            VERSION_CURRENT=$(echo "$RESULT" | jq -r '.tables[0].rows[0][0]')
            echo "Current version: $VERSION_CURRENT with error count: $COUNT_CURRENT"
          else
            echo "No rows found for current version"
            COUNT_CURRENT=0
            VERSION_CURRENT=""
          fi

          if [ "$ROWS_LENGTH" -gt 1 ]; then
            COUNT_PREVIOUS=$(echo "$RESULT" | jq -r '.tables[0].rows[1][1]')
            VERSION_PREVIOUS=$(echo "$RESULT" | jq -r '.tables[0].rows[1][0]')
            echo "Previous version: $VERSION_PREVIOUS with error count: $COUNT_PREVIOUS"
          else
            echo "Only one or no rows present, skipping previous version"
            COUNT_PREVIOUS=0
            VERSION_PREVIOUS=""
          fi

          SHOULD_ROLLBACK=false
          if [ "$VERSION_CURRENT" -eq "$APPLICATION_VERSION" ]; then
            if [ "$COUNT_CURRENT" -gt "$COUNT_PREVIOUS" ]; then
              SHOULD_ROLLBACK=true
              echo "Should Rollback : $SHOULD_ROLLBACK"
            else
              SHOULD_ROLLBACK=false
              echo "Should Rollback : $SHOULD_ROLLBACK"
            fi
              # Export outputs
              echo "count_current=$COUNT_CURRENT" >> $GITHUB_OUTPUT
              echo "version_current=$VERSION_CURRENT" >> $GITHUB_OUTPUT
              echo "count_previous=$COUNT_PREVIOUS" >> $GITHUB_OUTPUT
              echo "version_previous=$VERSION_PREVIOUS" >> $GITHUB_OUTPUT
              echo "should_rollback=$SHOULD_ROLLBACK" >> $GITHUB_OUTPUT          
          fi
          
      - name: Rollback deployment
        if: ${{ steps.query_errors.outputs.should_rollback == 'true' }}
        run: |
          echo "Rolling back to previous version: $(( ${{ github.run_number }} - 1 ))"
          echo "previous_run=$(( ${{ github.run_number }} - 1 ))" >> $GITHUB_OUTPUT
          #echo "Rolling back to previous version: ${{ steps.query_errors.outputs.version_previous }}"
          # Add your rollback command here

       # Rollback to previous stable
      - name: Rollback to previous stable
        if: ${{ steps.query_errors.outputs.should_rollback == 'true' }}
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            deployment_version=$(( ${{ github.run_number }} - 1 ))
            docker login ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} 
            docker stop simple-node-app || true
            docker rm simple-node-app || true
            docker run -d --name simple-node-app -p 3000:3000 -e VERSION=$deployment_version -e APPINSIGHTS_INSTRUMENTATIONKEY=${{secrets.APPINSIGHTS_INSTRUMENTATIONKEY}} ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app:v$deployment_version
            docker logout ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io
